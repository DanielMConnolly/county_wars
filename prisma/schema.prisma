generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  username        String?          @unique
  email           String?          @unique
  passwordHash    String?          @map("password_hash")
  createdAt       DateTime         @default(now()) @map("created_at")
  lastActive      DateTime         @default(now()) @map("last_active")
  highlightColor  String           @default("red") @map("highlight_color")
  gameTime        String?          @map("game_time")
  money           Int              @default(1000)
  gameUsers       GameUser[]
  createdGames    Game[]           @relation("GameCreator")
  placedLocations PlacedLocation[]
  userGameMoney   UserGameMoney[]

  @@map("users")
}

model Game {
  id              String           @id
  createdBy       String           @map("created_by")
  createdAt       DateTime         @default(now()) @map("created_at")
  isActive        Boolean          @default(true) @map("is_active")
  elapsedTime     Int              @default(0) @map("elapsed_time")
  status          GameStatus       @default(DRAFT)
  duration        Int              @default(30)
  name            String           @default("New Game")
  gameUsers       GameUser[]
  creator         User             @relation("GameCreator", fields: [createdBy], references: [id])
  placedLocations PlacedLocation[]
  userGameMoney   UserGameMoney[]

  @@map("games")
}

model UserGameMoney {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  gameId    String   @map("game_id")
  money     Int      @default(1000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
  @@map("user_game_money")
}

model PlacedLocation {
  id           Int          @id @default(autoincrement())
  userId       String       @map("user_id")
  gameId       String       @map("game_id")
  lat          Float
  long         Float
  name         String
  locationType LocationType @default(franchise) @map("location_type")
  timePlaced   DateTime     @default(now()) @map("time_placed")
  county       String?
  state        String?
  metroArea    String?      @map("metro_area")
  game         Game         @relation(fields: [gameId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("placed_locations")
}

model GameUser {
  id       Int      @id @default(autoincrement())
  userId   String   @map("user_id")
  gameId   String   @map("game_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  game     Game     @relation(fields: [gameId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
  @@map("game_users")
}

model PopulationPoint {
  id         Int    @id @default(autoincrement())
  latitude   Float
  longitude  Float
  population Int
  sourceFile String @map("source_file")

  @@unique([latitude, longitude])
  @@index([latitude, longitude])
  @@index([sourceFile])
  @@map("population_points")
}

enum GameStatus {
  DRAFT
  LIVE
  FINISHED
}

enum LocationType {
  franchise
  distributionCenter
}
